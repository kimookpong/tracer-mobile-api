
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  citizen_id: 'citizen_id',
  masking_citizen_id: 'masking_citizen_id',
  password: 'password',
  title: 'title',
  first_name: 'first_name',
  middle_name: 'middle_name',
  last_name: 'last_name',
  pic_url: 'pic_url',
  permissions: 'permissions',
  role_id: 'role_id',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Buyer_attachmentsScalarFieldEnum = {
  id: 'id',
  buyer_id: 'buyer_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.BuyersScalarFieldEnum = {
  id: 'id',
  buyer_code: 'buyer_code',
  company_name: 'company_name',
  comp_registration_id: 'comp_registration_id',
  country: 'country',
  address: 'address',
  title: 'title',
  first_name: 'first_name',
  middle_name: 'middle_name',
  last_name: 'last_name',
  phone_number: 'phone_number',
  email: 'email',
  whatsapp: 'whatsapp',
  wechat: 'wechat',
  line_id: 'line_id',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  country_code: 'country_code'
};

exports.Prisma.Cattle_attachmentsScalarFieldEnum = {
  id: 'id',
  cattle_id: 'cattle_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_breedsScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_th: 'name_th',
  short_name: 'short_name',
  remark: 'remark',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_create_stagedScalarFieldEnum = {
  id: 'id',
  staged_id: 'staged_id',
  order_request_id: 'order_request_id',
  farm_sourcing_id: 'farm_sourcing_id',
  farm_id: 'farm_id',
  pen_id: 'pen_id',
  cattle_type_id: 'cattle_type_id',
  cattle_breed_ids: 'cattle_breed_ids',
  nid: 'nid',
  gender: 'gender',
  castration_status: 'castration_status',
  pregnant_status: 'pregnant_status',
  birthdate: 'birthdate',
  passport_no: 'passport_no',
  color: 'color',
  ear: 'ear',
  horn: 'horn',
  weight: 'weight',
  date_weight: 'date_weight',
  tracer_tag: 'tracer_tag',
  breed_sire: 'breed_sire',
  breed_dam: 'breed_dam',
  breed_pgs: 'breed_pgs',
  breed_pgd: 'breed_pgd',
  breed_mgs: 'breed_mgs',
  breed_mgd: 'breed_mgd',
  country_code: 'country_code',
  health_treatment_date: 'health_treatment_date',
  health_veterinary_name: 'health_veterinary_name',
  health_health_condition: 'health_health_condition',
  health_symptom: 'health_symptom',
  health_cause_of_death: 'health_cause_of_death',
  health_treatment: 'health_treatment',
  health_drug_name: 'health_drug_name',
  health_dosage: 'health_dosage',
  health_period_residue: 'health_period_residue',
  vaccination_vaccination_date: 'vaccination_vaccination_date',
  vaccination_veterinary_name: 'vaccination_veterinary_name',
  vaccination_vaccine_type: 'vaccination_vaccine_type',
  vaccination_remark: 'vaccination_remark',
  vaccination_vaccine_id: 'vaccination_vaccine_id',
  vaccination_vaccine_lot_no: 'vaccination_vaccine_lot_no',
  vaccination_vaccine_expiry_date: 'vaccination_vaccine_expiry_date',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_healthsScalarFieldEnum = {
  id: 'id',
  cattle_id: 'cattle_id',
  treatment_date: 'treatment_date',
  veterinary_name: 'veterinary_name',
  health_condition: 'health_condition',
  symptom: 'symptom',
  cause_of_death: 'cause_of_death',
  treatment: 'treatment',
  drug_name: 'drug_name',
  dosage: 'dosage',
  period_residue: 'period_residue',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_matching_order_stagedScalarFieldEnum = {
  id: 'id',
  staged_id: 'staged_id',
  order_request_id: 'order_request_id',
  farm_sourcing_id: 'farm_sourcing_id',
  cattle_ids: 'cattle_ids',
  is_exists_all: 'is_exists_all',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_sourcingScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  order_request_id: 'order_request_id',
  farm_sourcing_id: 'farm_sourcing_id',
  cattle_id: 'cattle_id',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_typesScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_th: 'name_th',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Cattle_vaccinationsScalarFieldEnum = {
  id: 'id',
  cattle_id: 'cattle_id',
  vaccination_date: 'vaccination_date',
  veterinary_name: 'veterinary_name',
  vaccine_type: 'vaccine_type',
  remark: 'remark',
  vaccine_id: 'vaccine_id',
  vaccine_lot_no: 'vaccine_lot_no',
  vaccine_expiry_date: 'vaccine_expiry_date',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.CattlesScalarFieldEnum = {
  id: 'id',
  tracer_id: 'tracer_id',
  farm_id: 'farm_id',
  pen_id: 'pen_id',
  cattle_type_id: 'cattle_type_id',
  cattle_breed_ids: 'cattle_breed_ids',
  traceability_id: 'traceability_id',
  nid: 'nid',
  gender: 'gender',
  castration_status: 'castration_status',
  pregnant_status: 'pregnant_status',
  birthdate: 'birthdate',
  passport_no: 'passport_no',
  color: 'color',
  ear: 'ear',
  horn: 'horn',
  weight: 'weight',
  date_weight: 'date_weight',
  tracer_tag: 'tracer_tag',
  ear_tag: 'ear_tag',
  breed_sire: 'breed_sire',
  breed_dam: 'breed_dam',
  breed_pgs: 'breed_pgs',
  breed_pgd: 'breed_pgd',
  breed_mgs: 'breed_mgs',
  breed_mgd: 'breed_mgd',
  is_sourcing: 'is_sourcing',
  is_tracing: 'is_tracing',
  country_code: 'country_code',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Data_migrationsScalarFieldEnum = {
  version: 'version',
  dirty: 'dirty'
};

exports.Prisma.Farm_attachmentsScalarFieldEnum = {
  id: 'id',
  farm_id: 'farm_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  encrypted_key: 'encrypted_key'
};

exports.Prisma.Farm_authorizedScalarFieldEnum = {
  id: 'id',
  farm_id: 'farm_id',
  authorized_type: 'authorized_type',
  authorized_second_type: 'authorized_second_type',
  license_id: 'license_id',
  expire_date: 'expire_date',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Farm_create_stagedScalarFieldEnum = {
  id: 'id',
  staged_id: 'staged_id',
  farm_identification: 'farm_identification',
  farm_type: 'farm_type',
  ref_1: 'ref_1',
  max_cows: 'max_cows',
  name: 'name',
  standard: 'standard',
  rai: 'rai',
  ngan: 'ngan',
  wa: 'wa',
  address_line1: 'address_line1',
  address_subdistrict: 'address_subdistrict',
  address_district: 'address_district',
  address_province: 'address_province',
  address_zipcode: 'address_zipcode',
  tracer_id: 'tracer_id',
  is_owner_ref_farmer: 'is_owner_ref_farmer',
  farmer_id: 'farmer_id',
  owner_type: 'owner_type',
  owner_tin: 'owner_tin',
  owner_title: 'owner_title',
  owner_first_name: 'owner_first_name',
  owner_middle_name: 'owner_middle_name',
  owner_last_name: 'owner_last_name',
  owner_company_name: 'owner_company_name',
  owner_gender: 'owner_gender',
  owner_birthdate: 'owner_birthdate',
  owner_education_degree: 'owner_education_degree',
  owner_occupation: 'owner_occupation',
  owner_second_occupation: 'owner_second_occupation',
  owner_phone_number: 'owner_phone_number',
  owner_mobile_number: 'owner_mobile_number',
  owner_email: 'owner_email',
  owner_line_id: 'owner_line_id',
  owner_address_line1: 'owner_address_line1',
  owner_address_subdistrict: 'owner_address_subdistrict',
  owner_address_district: 'owner_address_district',
  owner_address_province: 'owner_address_province',
  owner_address_zipcode: 'owner_address_zipcode',
  owner_contact_address_line1: 'owner_contact_address_line1',
  owner_contact_address_subdistrict: 'owner_contact_address_subdistrict',
  owner_contact_address_district: 'owner_contact_address_district',
  owner_contact_address_province: 'owner_contact_address_province',
  owner_contact_address_zipcode: 'owner_contact_address_zipcode',
  authorized_type: 'authorized_type',
  authorized_second_type: 'authorized_second_type',
  authorized_license_id: 'authorized_license_id',
  authorized_expire_date: 'authorized_expire_date',
  veterinary_name: 'veterinary_name',
  veterinary_license_id: 'veterinary_license_id',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  status: 'status'
};

exports.Prisma.Farm_sourcingScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  order_request_id: 'order_request_id',
  farm_id: 'farm_id',
  amount: 'amount',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Farm_veterinaryScalarFieldEnum = {
  id: 'id',
  farm_id: 'farm_id',
  name: 'name',
  license_id: 'license_id',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Farmer_accountsScalarFieldEnum = {
  id: 'id',
  farmer_id: 'farmer_id',
  username: 'username',
  password: 'password',
  role_id: 'role_id',
  permissions: 'permissions',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Farmer_attachmentsScalarFieldEnum = {
  id: 'id',
  farmer_id: 'farmer_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  encrypted_key: 'encrypted_key'
};

exports.Prisma.Farmer_create_stagedScalarFieldEnum = {
  id: 'id',
  staged_id: 'staged_id',
  farmer_type: 'farmer_type',
  tin: 'tin',
  title: 'title',
  first_name: 'first_name',
  middle_name: 'middle_name',
  last_name: 'last_name',
  company_name: 'company_name',
  gender: 'gender',
  birthdate: 'birthdate',
  education_degree: 'education_degree',
  occupation: 'occupation',
  second_occupation: 'second_occupation',
  phone_number: 'phone_number',
  mobile_number: 'mobile_number',
  email: 'email',
  line_id: 'line_id',
  address_line1: 'address_line1',
  address_subdistrict: 'address_subdistrict',
  address_district: 'address_district',
  address_province: 'address_province',
  address_zipcode: 'address_zipcode',
  contact_address_line1: 'contact_address_line1',
  contact_address_subdistrict: 'contact_address_subdistrict',
  contact_address_district: 'contact_address_district',
  contact_address_province: 'contact_address_province',
  contact_address_zipcode: 'contact_address_zipcode',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.FarmersScalarFieldEnum = {
  id: 'id',
  tracer_id: 'tracer_id',
  farmer_type: 'farmer_type',
  tin: 'tin',
  masking_tin: 'masking_tin',
  title: 'title',
  first_name: 'first_name',
  middle_name: 'middle_name',
  last_name: 'last_name',
  company_name: 'company_name',
  gender: 'gender',
  birthdate: 'birthdate',
  education_degree: 'education_degree',
  occupation: 'occupation',
  second_occupation: 'second_occupation',
  phone_number: 'phone_number',
  mobile_number: 'mobile_number',
  email: 'email',
  line_id: 'line_id',
  address_line1: 'address_line1',
  address_subdistrict: 'address_subdistrict',
  address_district: 'address_district',
  address_province: 'address_province',
  address_zipcode: 'address_zipcode',
  contact_address_line1: 'contact_address_line1',
  contact_address_subdistrict: 'contact_address_subdistrict',
  contact_address_district: 'contact_address_district',
  contact_address_province: 'contact_address_province',
  contact_address_zipcode: 'contact_address_zipcode',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.FarmsScalarFieldEnum = {
  id: 'id',
  tracer_id: 'tracer_id',
  farm_identification: 'farm_identification',
  farm_type: 'farm_type',
  max_cows: 'max_cows',
  name: 'name',
  standard: 'standard',
  status: 'status',
  rai: 'rai',
  ngan: 'ngan',
  wa: 'wa',
  address_line1: 'address_line1',
  address_subdistrict: 'address_subdistrict',
  address_district: 'address_district',
  address_province: 'address_province',
  address_zipcode: 'address_zipcode',
  is_owner_ref_farmer: 'is_owner_ref_farmer',
  farmer_id: 'farmer_id',
  owner_type: 'owner_type',
  owner_tin: 'owner_tin',
  owner_masking_tin: 'owner_masking_tin',
  owner_title: 'owner_title',
  owner_first_name: 'owner_first_name',
  owner_middle_name: 'owner_middle_name',
  owner_last_name: 'owner_last_name',
  owner_company_name: 'owner_company_name',
  owner_gender: 'owner_gender',
  owner_birthdate: 'owner_birthdate',
  owner_education_degree: 'owner_education_degree',
  owner_occupation: 'owner_occupation',
  owner_second_occupation: 'owner_second_occupation',
  owner_phone_number: 'owner_phone_number',
  owner_mobile_number: 'owner_mobile_number',
  owner_email: 'owner_email',
  owner_line_id: 'owner_line_id',
  owner_address_line1: 'owner_address_line1',
  owner_address_subdistrict: 'owner_address_subdistrict',
  owner_address_district: 'owner_address_district',
  owner_address_province: 'owner_address_province',
  owner_address_zipcode: 'owner_address_zipcode',
  owner_contact_address_line1: 'owner_contact_address_line1',
  owner_contact_address_subdistrict: 'owner_contact_address_subdistrict',
  owner_contact_address_district: 'owner_contact_address_district',
  owner_contact_address_province: 'owner_contact_address_province',
  owner_contact_address_zipcode: 'owner_contact_address_zipcode',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  ref_1: 'ref_1'
};

exports.Prisma.Order_attachmentsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Order_requestsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  cattle_breed_id: 'cattle_breed_id',
  cattle_type_ids: 'cattle_type_ids',
  request_amount: 'request_amount',
  received_amount: 'received_amount',
  from_age: 'from_age',
  to_age: 'to_age',
  from_weight: 'from_weight',
  to_weight: 'to_weight',
  castration_status: 'castration_status',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by',
  gender: 'gender',
  pregnant_status: 'pregnant_status'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  buyer_id: 'buyer_id',
  buyer_code: 'buyer_code',
  buyer_company_name: 'buyer_company_name',
  buyer_register_date: 'buyer_register_date',
  order_code: 'order_code',
  remark: 'remark',
  delivery_from_date: 'delivery_from_date',
  delivery_to_date: 'delivery_to_date',
  delivery_type: 'delivery_type',
  origin_address: 'origin_address',
  destination_address: 'destination_address',
  destination_country: 'destination_country',
  destination_country_code: 'destination_country_code',
  total_price: 'total_price',
  quarantine_day: 'quarantine_day',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Pen_attachmentsScalarFieldEnum = {
  id: 'id',
  pen_id: 'pen_id',
  file_name: 'file_name',
  file_path: 'file_path',
  is_public: 'is_public',
  content_type: 'content_type',
  description: 'description',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.PensScalarFieldEnum = {
  id: 'id',
  farm_id: 'farm_id',
  pen_type: 'pen_type',
  pen_number: 'pen_number',
  capacity: 'capacity',
  name: 'name',
  wa: 'wa',
  latitude: 'latitude',
  longitude: 'longitude',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Schema_migrationsScalarFieldEnum = {
  version: 'version',
  dirty: 'dirty'
};

exports.Prisma.TraceabilityScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  document_no: 'document_no',
  total_animal: 'total_animal',
  origin_farm_id: 'origin_farm_id',
  origin_pen_id: 'origin_pen_id',
  destination_farm_id: 'destination_farm_id',
  destination_pen_id: 'destination_pen_id',
  specific_destination_name: 'specific_destination_name',
  destination_province: 'destination_province',
  shipment_date: 'shipment_date',
  estimated_arrival_date: 'estimated_arrival_date',
  destination_type: 'destination_type',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Traceability_cattleScalarFieldEnum = {
  id: 'id',
  traceability_id: 'traceability_id',
  vehicle_id: 'vehicle_id',
  cattle_id: 'cattle_id',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Traceability_statusScalarFieldEnum = {
  id: 'id',
  traceability_id: 'traceability_id',
  status: 'status',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.Traceability_vehicleScalarFieldEnum = {
  id: 'id',
  traceability_id: 'traceability_id',
  vehicle_type: 'vehicle_type',
  vehicle_registration: 'vehicle_registration',
  transport_company_name: 'transport_company_name',
  driver_title: 'driver_title',
  driver_first_name: 'driver_first_name',
  driver_middle_name: 'driver_middle_name',
  driver_last_name: 'driver_last_name',
  contact_title: 'contact_title',
  contact_first_name: 'contact_first_name',
  contact_middle_name: 'contact_middle_name',
  contact_last_name: 'contact_last_name',
  contact_phone: 'contact_phone',
  is_contract_same_driver: 'is_contract_same_driver',
  created_at: 'created_at',
  created_by_id: 'created_by_id',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by_id: 'updated_by_id',
  updated_by: 'updated_by'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  admins: 'admins',
  buyer_attachments: 'buyer_attachments',
  buyers: 'buyers',
  cattle_attachments: 'cattle_attachments',
  cattle_breeds: 'cattle_breeds',
  cattle_create_staged: 'cattle_create_staged',
  cattle_healths: 'cattle_healths',
  cattle_matching_order_staged: 'cattle_matching_order_staged',
  cattle_sourcing: 'cattle_sourcing',
  cattle_types: 'cattle_types',
  cattle_vaccinations: 'cattle_vaccinations',
  cattles: 'cattles',
  data_migrations: 'data_migrations',
  farm_attachments: 'farm_attachments',
  farm_authorized: 'farm_authorized',
  farm_create_staged: 'farm_create_staged',
  farm_sourcing: 'farm_sourcing',
  farm_veterinary: 'farm_veterinary',
  farmer_accounts: 'farmer_accounts',
  farmer_attachments: 'farmer_attachments',
  farmer_create_staged: 'farmer_create_staged',
  farmers: 'farmers',
  farms: 'farms',
  order_attachments: 'order_attachments',
  order_requests: 'order_requests',
  orders: 'orders',
  pen_attachments: 'pen_attachments',
  pens: 'pens',
  schema_migrations: 'schema_migrations',
  traceability: 'traceability',
  traceability_cattle: 'traceability_cattle',
  traceability_status: 'traceability_status',
  traceability_vehicle: 'traceability_vehicle'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
